import React from "react";
import { Bar } from "react-chartjs-2";
import { Card } from "react-bootstrap";
import { ReactComponent as Bpm } from "../../assets/bpm.svg";
const AnalyticsCard = props => {
  return (
    <>
      {props.name === "analytics" ? (
        <>
          {" "}
          <div className="analytics-card-chart mb-3">
            <div className="chart-info">
              <h5 className="card-category text-center">Your Activity</h5>
            </div>

            <div className="chart-area">
              <Bar data={chartExample3.data} options={chartExample3.options} />
            </div>
          </div>
        </>
      ) : (
        <div className="analytics-card mb-3">
          <div className="analytics-card-info">
            <div className="analytics-card-info-primary">Heart beat</div>
            <div className="analytics-card-info-secondary">
              122<span style={{ fontSize: "1rem", color: "white" }}>bpm</span>
            </div>
          </div>
          <div className="analytics-card-icon">
            <Bpm />
          </div>
        </div>
      )}
    </>
  );
};

let chartExample3 = {
  data: canvas => {
    let ctx = canvas.getContext("2d");

    let gradientStroke = ctx.createLinearGradient(0, 230, 0, 50);

    gradientStroke.addColorStop(1, "rgba(29,140,248,0.2)");
    gradientStroke.addColorStop(0.4, "rgba(29,140,248,0.0)");
    gradientStroke.addColorStop(0, "rgba(29,140,248,0)"); //blue colors

    return {
      labels: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      datasets: [
        {
          label: "Countries",
          fill: true,
          backgroundColor: gradientStroke,
          hoverBackgroundColor: gradientStroke,
          borderColor: "#1f8ef1",
          borderWidth: 2,
          borderDash: [],
          borderDashOffset: 0.0,
          data: [4, 6, 2, 5, 4, 1]
        }
      ]
    };
  },
  options: {
    maintainAspectRatio: false,
    legend: {
      display: false
    },
    tooltips: {
      backgroundColor: "#f5f5f5",
      titleFontColor: "#333",
      bodyFontColor: "#666",
      bodySpacing: 4,
      xPadding: 12,
      mode: "nearest",
      intersect: 0,
      position: "nearest"
    },
    responsive: true,
    scales: {
      yAxes: [
        {
          gridLines: {
            drawBorder: false,
            color: "white",
            zeroLineColor: "transparent"
          },
          ticks: {
            suggestedMin: 0,
            suggestedMax: 5,
            padding: 20,
            fontColor: "#5c72f2"
          }
        }
      ],
      xAxes: [
        {
          gridLines: {
            drawBorder: false,
            color: "white",
            zeroLineColor: "transparent"
          },
          ticks: {
            padding: 10,
            fontColor: "#5c72f2"
          }
        }
      ]
    }
  }
};

export default AnalyticsCard;
 41  
src/components/AnalyticsCard/_analyticscard.scss
@@ -0,0 +1,41 @@
.analytics-card {
  display: flex;
  justify-content: space-between;
  padding: 1em;
  background-color: $color-primary1;
  align-items: stretch;
  border-radius: 1em;
  width: 47%;
  &-info {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    &-primary {
      font-size: 1.2rem;
      color: $color-primary2;
    }
    &-secondary {
      font-size: 5rem;
      color: $color-primary2;
    }
  }
  &-icon {
    width: 20rem;
    height: 15rem;
    fill: $color-primary2;
    color: $color-primary2;
    margin-bottom: 1rem;
  }
}

.analytics-card-chart {
  padding: 1em;
  border-radius: 1em;
  background-color: $color-primary2;
  width: 47%;
  .chart-info {
    .card-category {
      font-size: 1.5rem;
    }
  }
}
 38  
src/components/Analyzes/Analyzes.js
@@ -0,0 +1,38 @@
import React from "react";
import { ReactComponent as Hemo } from "../../assets/hemoglobin.svg";
const Analyzes = () => {
  return (
    <>
      <div className="analyzes-container mt-5 mr-lg-3 pt-5">
        <div className="analyzes-info">
          <div className="analyzes-info-wrapper">
            <div className="analyzes-info-primary">
              <div className="analyzes-info-primary-title">Dynamic Hb</div>
              <div className="analyzes-info-primary-secondary">97/mmho</div>
              <div className="analyzes-info-primary-secondary">
                Below Normal
              </div>
            </div>
            <div className="analyzes-info-icon">
              <Hemo />
            </div>
          </div>
          <div className="analyzes-info-value">
            <div className="analyzes-info-value-primary">99mmho</div>
          </div>
        </div>
        <div className="analyzes-options">
          Analyzes
          <div className="analyzes-options-menu">Hemoglobin</div>
          <div className="analyzes-options-menu">Hemoglobin</div>
          <div className="analyzes-options-menu">Hemoglobin</div>
          <div className="analyzes-options-menu">Hemoglobin</div>
          <div className="analyzes-options-menu">Hemoglobin</div>
          <div className="analyzes-options-menu">Hemoglobin</div>
        </div>
      </div>
    </>
  );
};

export default Analyzes;
 56  
src/components/Analyzes/_analyzes.scss
@@ -0,0 +1,56 @@
.analyzes-container {
  display: flex;
  justify-content: space-between;
  .analyzes-info {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    .analyzes-info-wrapper {
      display: flex;
      justify-content: space-between;
      background: $color-primary1;
      color: $color-primary2;
      border-radius: 1em;
      padding: 1em;
      .analyzes-info-primary {
        &-title {
          font-size: 1.5rem;
          font-weight: 600;
        }
        &-secondary {
          font-size: 1rem;
          font-weight: 400;
          color: $color-tertiary3;
        }
      }
      .analyzes-info-icon {
        width: 8rem;
        height: 8rem;
        color: $color-primary2;
        fill: $color-primary2;
      }
    }

    .analyzes-info-value {
      color: $color-primary1;
      padding: 2em 1em;
      border-radius: 1em;
      background: $color-primary2;
      &-primary {
        text-align: center;
        font-size: 2rem;
      }
    }
  }
  .analyzes-options {
    background: $color-primary2;
    padding: 1em;
    color: $color-tertiary1;
    border-radius: 1em;
    &-menu {
      font-size: 1.2rem;
      color: $color-tertiary2;
      padding: 0.5em;
    }
  }
}
 20  
src/components/App.js
@@ -0,0 +1,20 @@
import React from "react";
import { BrowserRouter as Router, Route, Switch } from "react-router-dom";
import LandingPage from "../Pages/LandingPage/LandingPage";
import Dashboard from "../Pages/Dashboard/Dashboard";
import FinalDashboard from "../Pages/FinalDashboard/FinalDashboard";
function App() {
  return (
    <div>
      <Router>
        <Switch>
          <Route exact path="/" component={LandingPage} />
          <Route path="/dashboard" component={Dashboard} />
          <Route path="/details" component={FinalDashboard} />
        </Switch>
      </Router>
    </div>
  );
}

export default App;
 16  
src/components/Button/Buttons.js
@@ -0,0 +1,16 @@
import React from "react";
import { ReactComponent as Arrow } from "../../assets/chevron.svg";
const Buttons = () => {
  return (
    <>
      <div className="buttons-wrapper">
        <div className="button-info">Find a doctor</div>
        <div className="button-icon">
          <Arrow />
        </div>
      </div>
    </>
  );
};

export default Buttons;
 61  
src/components/Button/_buttons.scss
@@ -0,0 +1,61 @@
.buttons-wrapper {
  margin-top: 1.3em;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  padding: 0.7em 1em;
  width: 25%;
  background-color: $color-secondary1;
  color: $color-primary2;
  border-radius: 30px;
  cursor: pointer;
  box-shadow: 9px 9px 23px -6px rgba(245, 115, 76, 0.72);
  transition: all 0.3s ease;
  .button-info {
    font-size: 1rem;
    font-weight: 400;
  }
  .button-icon {
    color: $color-primary2;
    fill: $color-primary2;
  }
  &:hover {
    transform: scale(1.1);
  }
  &:active {
    transform: scale(0.98);
  }
}

@media only screen and (max-width: 600px) {
  .buttons-wrapper {
    margin-top: 1.3em;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    padding: 0.7em 1em;
    width: 30%;
    background-color: $color-secondary1;
    color: $color-primary2;
    border-radius: 30px;
    cursor: pointer;
    box-shadow: 9px 9px 23px -6px rgba(245, 115, 76, 0.72);
    transition: all 0.3s ease;
    .button-info {
      font-size: 1rem;
      font-weight: 400;
    }
    .button-icon {
      color: $color-primary2;
      fill: $color-primary2;
    }
    &:hover {
      transform: scale(1.1);
    }
    &:active {
      transform: scale(0.98);
    }
  }
}
 93  
src/components/CalendarSlider/Calendar.js
@@ -0,0 +1,93 @@
import React, { useState, useEffect } from "react";
import Flickity from "react-flickity-component";
import moment from "moment";
import { NavDropdown } from "react-bootstrap";

function Calendar() {
  const [dateObj, setDateObj] = useState(moment());
  const [data, setData] = useState([]);
  const [month, setMonth] = useState(moment.months());
  const [currMonth, setCurrMonth] = useState(dateObj.format("MMMM"));
  let weekdayshort = moment.weekdaysShort();
  let currDay = new Date().getDate() - 1;

  const firstDayOfMonth = () => {
    let dateObject = dateObj;
    let firstDay = moment(dateObject)
      .startOf("month")
      .format("d");
    return firstDay;
  };
  const daysInMonth = () => {
    return dateObj.daysInMonth();
  };

  const createData = () => {
    let firstday = firstDayOfMonth();
    let daysofMonth = daysInMonth();
    let months = [];
    for (let i = 1; i <= daysofMonth; i++) {
      if (firstday > 6) {
        firstday = 0;
      }
      months.push({ date: i, week: weekdayshort[firstday] });
      firstday++;
    }
    setData(months);
    return months;
  };
  const handleMonth = item => {
    let monthNo = item; // get month number
    let dateObject = Object.assign({}, dateObj);
    dateObject = moment(dateObject).set("month", monthNo); // change month value
    setDateObj(dateObject);
    setCurrMonth(month[item]);
  };
  useEffect(() => {
    console.log(dateObj);
    console.log(createData());
    createData();
  }, [dateObj]);
  const flickityOptions = {
    initialIndex: currDay,
    pageDots: false,
    wrapAround: true,
    freeScroll: true,
    reloadOnUpdate: true, // default false
    static: false,
    cellAlign: "center"
  };
  return (
    <div className="mt-5  px-5">
      <div className="month-selector">
        <NavDropdown title={currMonth} id="basic-nav-dropdown">
          {month.map((item, index) => {
            return (
              <NavDropdown.Item key={index} onClick={() => handleMonth(index)}>
                {item}
              </NavDropdown.Item>
            );
          })}
        </NavDropdown>
      </div>
      <Flickity options={flickityOptions}>
        {data.map((item, index) => {
          return (
            <div className="carousel-cell" key={index}>
              <div
                className={
                  currDay == index ? "calendar-active" : "calendar-wrapper"
                }
                key={index}
              >
                <div className="calendar-week">{item.week}</div>
                <div className="calendar-date">{item.date}</div>
              </div>
            </div>
          );
        })}
      </Flickity>
    </div>
  );
}
export default Calendar;
 82  
src/components/CalendarSlider/CalendarSlider.js
@@ -0,0 +1,82 @@
import React from "react";
import moment from "moment";
import Slider from "./Slider";

class CalendarSlider extends React.Component {
  state = {
    dateObject: moment()
  };
  weekdayshort = moment.weekdaysShort();
  componentDidMount() {
    console.log(this.weekdayshort);
    console.log(this.createData());
    console.log(this.daysInMonth());
  }
  firstDayOfMonth = () => {
    let dateObject = this.state.dateObject;
    let firstDay = moment(dateObject)
      .startOf("month")
      .format("d");
    return firstDay;
  };
  daysInMonth = () => {
    return this.state.dateObject.daysInMonth();
  };

  createData = () => {
    let firstday = this.firstDayOfMonth();
    let daysofMonth = this.daysInMonth();
    let months = [];
    for (let i = 1; i <= daysofMonth; i++) {
      if (firstday > 6) {
        firstday = 0;
      }
      months.push({ date: i, week: this.weekdayshort[firstday] });
      firstday++;
    }
    return months;
  };
  render() {
    let data = [
      "Apple",
      "Ball",
      "Cat",
      "Dog",
      "Elephant",
      "Fruits",
      "Gorilla",
      "Horse",
      "Ink",
      "Jug",
      "Kite",
      "Lemon",
      "Orange",
      "Paddy",
      "Queen",
      "Rose",
      "Street",
      "Tuesday",
      "Umbrella",
      "Vanilla",
      "Wax",
      "Xerox",
      "Yarn",
      "Zebra"
    ];
    return (
      <div className="parent mt-lg-5">
        <Slider>
          {data.map(value => {
            return (
              <div key={value} className="child">
                {value}
              </div>
            );
          })}
        </Slider>
      </div>
    );
  }
}

export default CalendarSlider;
 64  
src/components/CalendarSlider/Slider.js
@@ -0,0 +1,64 @@
import React from "react";

class Slider extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      prevDisable: true,
      nextDisable:
        this.refs && this.refs.offsetWidth >= this.refs.scrollWidth
          ? true
          : false
    };
  }

  componentDidMount() {
    this.checkButtons(this.refs.offsetWidth, this.refs.scrollWidth);
  }
  checkButtons = (offsetWidthValue, scrollWidthValue) => {
    this.setState({
      prevDisable: this.refs.scrollLeft <= 0 ? true : false,
      nextDisable:
        this.refs.scrollLeft + offsetWidthValue >= scrollWidthValue
          ? true
          : false
    });
  };

  render() {
    const offsetWidthValue = this.refs.offsetWidth,
      scrollWidthValue = this.refs.scrollWidth;
    return (
      <div
        className="slider-container"
        ref={el => {
          this.refs = el;
        }}
      >
        <div className="slider-wrapper">{this.props.children}</div>
        <div
          className={`btn prev ${this.state.prevDisable ? "disable" : ""}`}
          disabled={this.state.prevDisable}
          onClick={() => {
            this.refs.scrollLeft -= offsetWidthValue / 2;
            this.checkButtons(offsetWidthValue, scrollWidthValue);
          }}
        >
          {"<"}
        </div>
        <div
          className={`btn next ${this.state.nextDisable ? "disable" : ""}`}
          disabled={this.state.nextDisable}
          onClick={() => {
            this.refs.scrollLeft += offsetWidthValue / 2;
            this.checkButtons(offsetWidthValue, scrollWidthValue);
          }}
        >
          {">"}
        </div>
      </div>
    );
  }
}

export default Slider;
 244  
src/components/CalendarSlider/_calendarslider.scss
@@ -0,0 +1,244 @@
.carousel-cell {
  margin: 0 0.5em;
  color: white;
  .calendar-wrapper {
    display: flex;
    flex-direction: column;
    padding: 0.5em 0.2em;
    background-color: $color-primary2;
    justify-content: space-between;
    align-items: center;
    transition: all 0.3s ease;
    .calendar-week {
      font-size: 1.5rem;
      color: $color-primary1;
      font-weight: 400;
    }
    .calendar-date {
      font-size: 1.5rem;
      color: $color-tertiary1;
      font-weight: 600;
    }
    &:hover {
      display: flex;
      flex-direction: column;
      padding: 0.5em 0.2em;
      background-color: $color-primary1;
      justify-content: space-between;
      align-items: center;
      border-radius: 3em;
      background-color: $color-primary1;
      color: $color-primary2;
      .calendar-week {
        font-size: 1.5rem;
        color: $color-primary2;
        font-weight: 400;
      }
      .calendar-date {
        font-size: 1.5rem;
        color: $color-primary2;
        font-weight: 600;
      }
    }
  }
  .calendar-active {
    display: flex;
    flex-direction: column;
    padding: 0.5em 0.2em;
    background-color: $color-primary1;
    justify-content: space-between;
    align-items: center;
    border-radius: 3em;
    .calendar-week {
      font-size: 1.5rem;
      color: $color-primary2;
      font-weight: 400;
    }
    .calendar-date {
      font-size: 1.5rem;
      color: $color-primary2;
      font-weight: 600;
    }
  }
}

//month selelctor
.month-selector {
  a {
    color: $color-tertiary1;
    font-size: 1.7rem;
    font-weight: 500;
  }
  .dropdown-menu {
    height: 12rem;
    overflow-y: scroll;
    .dropdown-item {
      a {
        font-size: 1.7rem;
        font-weight: 500 !important;
      }
    }
    &::-webkit-scrollbar {
      width: 5px;

      cursor: pointer;
    }
    &::-webkit-scrollbar:hover {
      width: 8px;
    }
    &::-webkit-scrollbar-thumb {
      background: $color-primary1;
      cursor: pointer;
      border-radius: 10px;
    }
  }
}

//flickity
/*! Flickity v2.1.2
https://flickity.metafizzy.co
---------------------------------------------- */

.flickity-enabled {
  position: relative;
}

.flickity-enabled:focus {
  outline: none;
}

.flickity-viewport {
  overflow: hidden;
  position: relative;
  height: 100%;
}

.flickity-slider {
  position: absolute;
  width: 100%;
  height: 100%;
}

/* draggable */

.flickity-enabled.is-draggable {
  -webkit-tap-highlight-color: transparent;
  tap-highlight-color: transparent;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.flickity-enabled.is-draggable .flickity-viewport {
  cursor: move;
  cursor: -webkit-grab;
  cursor: grab;
}

.flickity-enabled.is-draggable .flickity-viewport.is-pointer-down {
  cursor: -webkit-grabbing;
  cursor: grabbing;
}

/* ---- flickity-button ---- */

.flickity-button {
  position: absolute;
  background: $color-primary1;
  border: none;
  color: $color-primary2;
}

.flickity-button:hover {
  background: $color-secondary1;

  cursor: pointer;
}

.flickity-button:focus {
  outline: none;
  box-shadow: 0 0 0 5px #19f;
}

.flickity-button:active {
  opacity: 0.6;
}

.flickity-button:disabled {
  opacity: 0;
  cursor: auto;
  /* prevent disabled button from capturing pointer up event. #716 */
  pointer-events: none;
}

.flickity-button-icon {
  fill: #333;
}

/* ---- previous/next buttons ---- */

.flickity-prev-next-button {
  top: 50%;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  /* vertically center */
  transform: translateY(-50%);
}

.flickity-prev-next-button.previous {
  left: -30px;
}
.flickity-prev-next-button.next {
  right: -30px;
}
/* right to left */
.flickity-rtl .flickity-prev-next-button.previous {
  left: auto;
  right: 10px;
}
.flickity-rtl .flickity-prev-next-button.next {
  right: auto;
  left: 10px;
}

.flickity-prev-next-button .flickity-button-icon {
  position: absolute;
  left: 20%;
  top: 20%;
  width: 60%;
  height: 60%;
}

/* ---- page dots ---- */

.flickity-page-dots {
  position: absolute;
  width: 100%;
  bottom: -25px;
  padding: 0;
  margin: 0;
  list-style: none;
  text-align: center;
  line-height: 1;
}

.flickity-rtl .flickity-page-dots {
  direction: rtl;
}

.flickity-page-dots .dot {
  display: inline-block;
  width: 10px;
  height: 10px;
  margin: 0 8px;
  background: #333;
  border-radius: 50%;
  opacity: 0.25;
  cursor: pointer;
}

.flickity-page-dots .dot.is-selected {
  opacity: 1;
}
 28  
src/components/Card/Cards.js
@@ -0,0 +1,28 @@
import React from "react";
import { ReactComponent as Cardio } from "../../assets/cardiology.svg";
import { ReactComponent as Tooth } from "../../assets/tooth.svg";
import { ReactComponent as Hearts } from "../../assets/lungs.svg";

const Cards = props => {
  return (
    <>
      <div className="cards-container">
        <div className="cards-body">
          <div className="cards-icon">
            {props.procedure === "Cardio" ? (
              <Cardio />
            ) : "Dentistry" ? (
              <Tooth />
            ) : (
              <Hearts />
            )}
          </div>
          <div className="cards-info">{props.procedure}</div>
          <div className="cards-quote">3 appoinments</div>
        </div>
      </div>
    </>
  );
};

export default Cards;
 42  
src/components/Card/_cards.scss
@@ -0,0 +1,42 @@
.cards-container {
  padding: 2em;
  background-color: white;
  opacity: 0.7;
  cursor: pointer;
  -webkit-box-shadow: 1px 1px 13px 1px rgba(0, 0, 0, 0.24);
  box-shadow: 1px 1px 13px 1px rgba(0, 0, 0, 0.24);
  border-radius: 1em;
  transition: all 0.3s ease-out;
  .cards-body {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    .cards-icon {
      color: $color-secondary2;
      fill: $color-secondary2;
    }
    .cards-info {
      margin-top: 0.5em;
      font-size: 2rem;
      color: $color-tertiary1;
      font-weight: 600;
    }
    .cards-quote {
      font-size: 1.3rem;
      color: $color-tertiary2;
    }
  }
  &:hover {
    transform: scale(1.1);
  }
  &:active {
    transform: scale(0.92);
  }
}

@media only screen and (max-width: 700px) {
  .cards-container {
    padding: 0.75em;
  }
}
 25  
src/components/DiscountsCard/DiscountsCard.js
@@ -0,0 +1,25 @@
import React from "react";
import { ReactComponent as Lungsvec } from "../../assets/lungs_vec.svg";
const DiscountsCard = () => {
  return (
    <>
      <div className="dscards-container mb-3">
        <div className="dscards-info">
          <span className="dscards-info-primary mt-sm-5">
            Today <span style={{ color: "black" }}>10%</span> discounts on lung
            examinations
          </span>
          <span className="dscards-info-secondary mt-sm-3">
            The package price includes consultaion of
            pulmonologist,spirography,cardiogram
          </span>
        </div>
        <div className="dscards-image">
          <Lungsvec />
        </div>
      </div>
    </>
  );
};

export default DiscountsCard;
 72  
src/components/DiscountsCard/_discountscard.scss
@@ -0,0 +1,72 @@
.dscards-container {
  display: flex;
  padding: 1em 2.5em;
  justify-content: space-around;
  border-radius: 1em;
  background: linear-gradient(
    90deg,
    rgba(255, 250, 250, 0.3337710084033614) 0%,
    rgba(172, 180, 246, 1) 0%,
    rgba(149, 161, 245, 1) 0%,
    rgba(127, 143, 244, 1) 0%,
    rgba(121, 138, 244, 1) 29%,
    rgba(92, 114, 242, 1) 93%
  );
  box-shadow: 5px 5px 18px 2px rgba(0, 0, 0, 0.47);

  transition: all 0.3s ease-in;
  cursor: pointer;
  .dscards-info {
    display: flex;
    flex-direction: column;
    &-primary {
      font-size: 3rem;
      color: $color-primary2;
      font-weight: 800;
      line-height: 1;
      text-align: left;
    }
    &-secondary {
      font-size: 1.5rem;
      color: $color-tertiary3;
      font-weight: 400;
    }
  }
  .dscards-image {
    width: 30%;
    height: 90%;
    fill: $color-primary2;
  }
  &:hover {
    transform: scale(1.05);
  }
  &:active {
    transform: scale(0.92);
  }
}

@media only screen and (max-width: 600px) {
  .dscards-container {
    padding: 1em 2em;
    justify-content: space-between;
    .dscards-info {
      display: flex;
      flex-direction: column;
      &-primary {
        font-size: 2.5rem;
        color: $color-primary2;
        font-weight: 800;
        line-height: 1;
        text-align: left;
      }
      &-secondary {
        font-size: 1.3rem;
        color: $color-tertiary3;
        font-weight: 400;
      }
    }
    .dscards-image {
      width: 50%;
    }
  }
}
 195  
src/components/Graphs/Graphs.js
@@ -0,0 +1,195 @@
import React, { useState, useEffect } from "react";

import { Line } from "react-chartjs-2";

import { Card, NavDropdown } from "react-bootstrap";

const Graphs = () => {
  const [years, setYears] = useState([]);
  const [currYear, setCurryear] = useState("");
  const [btnToggle, setBtnToggle] = useState("year");
  useEffect(() => {
    let d = new Date();
    let n = d.getFullYear();
    let tempyears = [];
    for (let i = 0; i < 2; i++) {
      tempyears.push(n - i);
    }
    setYears(tempyears);
    setCurryear(tempyears[0]);
  }, []);
  const handleYear = index => {
    let nextcurr = years[index];
    let nextYears = years.filter(item => {
      return item !== currYear;
    });
    setYears([...nextYears, currYear]);
    setCurryear(nextcurr);
  };

  const handlebtnToggle = data => {
    setBtnToggle(data);
  };
  ///options for chart
  let chart1_2_options = {
    maintainAspectRatio: false,
    legend: {
      display: false
    },
    tooltips: {
      backgroundColor: "#f5f6fc",
      titleFontColor: "#333",
      bodyFontColor: "#666",
      bodySpacing: 4,
      xPadding: 12,
      mode: "nearest",
      intersect: 0,
      position: "nearest"
    },
    responsive: true,
    scales: {
      yAxes: [
        {
          barPercentage: 1.6,
          gridLines: {
            drawBorder: false,
            color: "#dae3e6",
            zeroLineColor: "#dae3e6",
            borderDash: [3, 13],
            zeroLineBorderDash: [3, 13]
          },
          ticks: {
            suggestedMin: 0,
            suggestedMax: 10,
            padding: 10,
            fontColor: "#5c72f2"
          }
        }
      ],
      xAxes: [
        {
          barPercentage: 1.6,
          gridLines: {
            drawBorder: false,
            color: "transparent",
            zeroLineColor: "transparent"
          },
          ticks: {
            padding: 10,
            fontColor: "#5c72f2"
          }
        }
      ]
    }
  };

  let chartExample2 = {
    data: canvas => {
      let ctx = canvas.getContext("2d");

      let gradientStroke = ctx.createLinearGradient(0, 230, 0, 50);

      gradientStroke.addColorStop(1, "rgba(29,140,248,0.2)");
      gradientStroke.addColorStop(0.4, "rgba(29,140,248,0.0)");
      gradientStroke.addColorStop(0, "rgba(29,140,248,0)"); //blue colors

      return {
        labels: [
          "JAN",
          "FEB",
          "MAR",
          "APR",
          "JUN",
          "JUL",
          "AUG",
          "SEP",
          "OCT",
          "NOV",
          "DEC"
        ],
        datasets: [
          {
            label: "No.of Illness",
            fill: true,
            backgroundColor: gradientStroke,
            borderColor: "#1f8ef1",
            borderWidth: 2,
            borderDash: [],
            borderDashOffset: 0.0,
            pointBackgroundColor: "#1f8ef1",
            pointBorderColor: "rgba(255,255,255,0)",
            pointHoverBackgroundColor: "#1f8ef1",
            pointBorderWidth: 20,
            pointHoverRadius: 4,
            pointHoverBorderWidth: 15,
            pointRadius: 4,
            data:
              currYear === 2020
                ? [8, 4.5, 9, 6, 3, 10, 6, 7, 12, 3, 4, 5]
                : [3, 9, 4, 8, 2, 7, 3, 10, 5, 6, 9, 1]
          }
        ]
      };
    },
    options: chart1_2_options
  };

  return (
    <div className="graph-card mt-sm-5">
      <Card.Body>
        <div className="graph-header mb-sm-2">
          <span className="text-darker graph-card-title font-weight-bolder">
            Statistics of your health
          </span>

          <NavDropdown title={currYear} id="basic-nav-dropdown">
            {years.map((item, index) => {
              if (index !== 0) {
                return (
                  <NavDropdown.Item
                    onClick={() => handleYear(index)}
                    key={item}
                  >
                    {item}
                  </NavDropdown.Item>
                );
              } else {
                return null;
              }
            })}
          </NavDropdown>

          <span className="pl-5">
            <div
              className={
                btnToggle !== "year"
                  ? "year-toggle ml-5"
                  : "year-toggle-active ml-5"
              }
              onClick={() => handlebtnToggle("year")}
            >
              Year
            </div>
          </span>
          <span className="pr-5">
            <div
              className={
                btnToggle !== "month"
                  ? "month-toggle mr-5"
                  : "month-toggle-active mr-5"
              }
              onClick={() => handlebtnToggle("month")}
            >
              Month
            </div>
          </span>
        </div>

        <div className="graph-line">
          <Line data={chartExample2.data} options={chartExample2.options} />
        </div>
      </Card.Body>
    </div>
  );
};
export default Graphs;
 102  
src/components/Graphs/_graphs.scss
@@ -0,0 +1,102 @@
.graph-card {
  background: $color-primary2;
  padding: 1em;
  border: 0;
  position: relative;
  width: 100%;

  margin-bottom: 30px;
  box-shadow: 0 1px 20px 0px rgba(0, 0, 0, 0.1);
  border-radius: 1em;
  &-title {
    font-size: 2rem;
  }
  .graph-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    .dropdown {
      button {
        background-color: $color-primary2 !important;
        color: $color-primary1 !important;
        border: none !important;
        font-size: 1.5rem;
        outline: none !important;
      }

      .dropdown-menu {
        font-size: 1.4rem !important;
        min-width: 100%;
        overflow-y: scroll;
        max-height: 10rem;
        padding: 0.3em 0.7em;
        border-radius: 0.5em;

        .dropdown-item {
          color: $color-primary1 !important;
          padding: 0;
          margin-top: 0.5em;
          &:active {
            color: $color-primary1;
            background: $color-primary2;
          }
        }

        &::-webkit-scrollbar {
          width: 3px;
        }
        &::-webkit-scrollbar-thumb {
          background: #888;
        }
      }
    }

    .year-toggle {
      font-size: 1.5rem;
      padding: 0.5em 0.7em;
      cursor: pointer;
      transition: all 0.3s ease-in;
    }
    .year-toggle-active {
      font-size: 1.5rem;
      padding: 0.5em 0.7em;
      background-color: $color-primary1;
      border-radius: 0.5em;
      color: $color-primary2;
      cursor: pointer;
      transition: all 0.3s ease-in;
    }
    .month-toggle {
      font-size: 1.5rem;
      padding: 0.5em 0.7em;
      cursor: pointer;
      transition: all 0.3s ease-in;
    }
    .month-toggle-active {
      font-size: 1.5rem;
      padding: 0.5em 0.7em;
      background-color: $color-primary1;
      border-radius: 0.5em;
      color: $color-primary2;
      cursor: pointer;
      transition: all 0.3s ease-in;
    }
  }

  .graph-line {
    height: 22rem;
  }
}

//media queries
@media only screen and (max-width: 600px) {
  .graph-card {
    margin-top: 2em;
    &-title {
      font-size: 1.5rem;
    }
    .graph-line {
      margin-top: 1em;
    }
  }
}
 30  
src/components/HealthDetail/HealthDetail.js
@@ -0,0 +1,30 @@
import React from "react";

const HealthDetail = () => {
  return (
    <>
      <div className="hdetail-container mr-lg-3 ml-lg-3 mt-sm-5">
        <div className="hdetail-main">
          <div className="hdetail-primary">Blood </div>{" "}
          <div className="hdetail-secondary">
            B<span style={{ fontSize: "1.5rem" }}>+</span>
          </div>
        </div>
        <div className="hdetail-main">
          <div className="hdetail-primary">Height </div>{" "}
          <div className="hdetail-secondary">175 cm</div>
        </div>
        <div className="hdetail-main">
          <div className="hdetail-primary">Weight </div>{" "}
          <div className="hdetail-secondary">64 kg</div>
        </div>
        <div className="hdetail-main">
          <div className="hdetail-primary">Pressure </div>{" "}
          <div className="hdetail-secondary">120/81</div>
        </div>
      </div>
    </>
  );
};

export default HealthDetail;
 34  
src/components/HealthDetail/_healthdetail.scss
@@ -0,0 +1,34 @@
.hdetail-container {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  .hdetail-main {
    width: 25%;

    padding: 0 1em;
    &:not(:last-child) {
      border-right: 1.3px solid #cbcdd1;
    }
    .hdetail-primary {
      font-size: 1rem;
      color: $color-tertiary2;
      margin-bottom: 0.5em;
      text-align: center;
    }
    .hdetail-secondary {
      font-size: 1.3rem;
      color: $color-tertiary1;
      font-weight: 600;
      text-align: center;
    }
  }
}

//media queries

@media only screen and (max-width: 600px) {
  .hdetail-container {
    margin-top: 2rem;
  }
}
 136  
src/components/MyAppoinments/MyAppoinments.js
@@ -0,0 +1,136 @@
import React from "react";
import { Table } from "react-bootstrap";

import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";

import { ReactComponent as Updown } from "../../assets/updown.svg";
import { faClock } from "@fortawesome/free-solid-svg-icons";
import { faCheck } from "@fortawesome/free-solid-svg-icons";

const useSortableData = (items, config = null) => {
  const [sortConfig, setSortConfig] = React.useState(config);

  const sortedItems = React.useMemo(() => {
    let sortableItems = [...items];
    if (sortConfig !== null) {
      if (sortConfig.key === "Date") {
        sortableItems.sort((a, b) => {
          let dateA = new Date(a[sortConfig.key]);
          let dateB = new Date(b[sortConfig.key]);
          if (dateA < dateB) {
            return sortConfig.direction === "ascending" ? -1 : 1;
          }
          if (dateA > dateB) {
            return sortConfig.direction === "ascending" ? 1 : -1;
          }
          return 0;
        });
      } else {
        sortableItems.sort((a, b) => {
          if (a[sortConfig.key] < b[sortConfig.key]) {
            return sortConfig.direction === "ascending" ? -1 : 1;
          }
          if (a[sortConfig.key] > b[sortConfig.key]) {
            return sortConfig.direction === "ascending" ? 1 : -1;
          }
          return 0;
        });
      }
    }
    return sortableItems;
  }, [items, sortConfig]);

  const requestSort = key => {
    let direction = "ascending";
    if (
      sortConfig &&
      sortConfig.key === key &&
      sortConfig.direction === "ascending"
    ) {
      direction = "descending";
    }
    setSortConfig({ key, direction });
  };

  return { items: sortedItems, requestSort, sortConfig };
};
const MyAppoinments = props => {
  const { items, requestSort, sortConfig } = useSortableData(props.appoinments);
  return (
    <>
      <div className="myappoinments-container">
        <Table borderless>
          <thead>
            <tr>
              <th>Name</th>
              <th>Specialist</th>
              <th>
                <div className="d-flex">
                  <div className="mr-2"> Date</div>
                  <div
                    style={{ width: "15px", height: "12px" }}
                    onClick={() => requestSort("Date")}
                  >
                    <Updown />
                  </div>
                </div>
              </th>

              <th>
                <div className="d-flex">
                  <div className="mr-2"> Time</div>
                  <div
                    style={{ width: "15px", height: "12px" }}
                    onClick={() => requestSort("Time")}
                  >
                    <Updown />
                  </div>
                </div>
              </th>
              <th>Staus</th>
            </tr>
          </thead>
          <tbody>
            {items.map((item, index) => {
              return (
                <tr key={item.id}>
                  <td>
                    <div className="d-flex align-content-center">
                      {" "}
                      <div className="profile-img">
                        <img src={item.Photo} alt="profile" />
                      </div>
                      {item.Name}
                    </div>
                  </td>
                  <td>{item.Specialist}</td>
                  <td>{item.Date}</td>

                  <td>{item.Time}</td>
                  <td>
                    <div
                      className={
                        item.pending
                          ? "myappoinments-pending"
                          : "myappoinments-finished"
                      }
                    >
                      {" "}
                      {item.pending ? (
                        <FontAwesomeIcon icon={faClock} size="1x" />
                      ) : (
                        <FontAwesomeIcon icon={faCheck} size="1x" />
                      )}
                    </div>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </Table>
      </div>
    </>
  );
};

export default MyAppoinments;
 52  
src/components/MyAppoinments/_myappoinments.scss
@@ -0,0 +1,52 @@
.myappoinments-container {
  table {
    border-collapse: separate;
    border-spacing: 0 15px !important;
    tbody tr:hover {
      box-shadow: 5px 5px 18px 2px rgba(0, 0, 0, 0.47);
      transform: scale(1.1);
      td {
        background: $color-primary1;
        color: $color-primary2;
        transform: scale(1.1);
      }
      .myappoinments-finished {
        color: $color-primary2 !important;
      }
      .myappoinments-pending {
        color: $color-primary2 !important;
      }
    }
    tr td {
      background: white;
      padding: 1em 0.7em;
      cursor: pointer;
      transition: all 0.2s ease-in-out;
    }
    tr td:first-child {
      border-top-left-radius: 0.5em;
      border-bottom-left-radius: 0.5em;
    }
    tr td:last-child {
      border-top-right-radius: 0.5em;
      border-bottom-right-radius: 0.5em;
    }
  }
  .profile-img {
    width: 30px;
    height: 30px;
    border-radius: 1em;
    margin-right: 1em;
    img {
      width: 30px;
      height: 30px;
      border-radius: 3em;
    }
  }
  .myappoinments-finished {
    color: $color-primary1;
  }
  .myappoinments-pending {
    color: $color-secondary1;
  }
}
 53  
src/components/Payments/Payments.js
@@ -0,0 +1,53 @@
import React, { useState } from "react";

import PaymentCard from "react-payment-card-component";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faPlus } from "@fortawesome/free-solid-svg-icons";
import { faTimes } from "@fortawesome/free-solid-svg-icons";
const Payments = () => {
  const [flipped, setFlipped] = useState(false);
  const handleFlip = () => {
    setFlipped(prev => !prev);
  };
  return (
    <>
      <div className="payments-container py-3">
        <div
          className="payments-card"
          onMouseOver={handleFlip}
          onMouseOut={handleFlip}
        >
          <PaymentCard
            bank="itau"
            model="personnalite"
            type="platinum"
            brand="visa"
            number="**** **** **** 4173"
            cvv="202"
            holderName="Owen Lars"
            expiration="12/20"
            flipped={flipped}
          />
        </div>
        <div className="payments-buttons mt-3">
          <div className="payments-buttons-add">
            <div className="text-center">
              {" "}
              <FontAwesomeIcon icon={faPlus} size="1x" />
            </div>
            Add card
          </div>
          <div className="payments-buttons-remove">
            <div className="text-center">
              {" "}
              <FontAwesomeIcon icon={faTimes} size="1x" />
            </div>
            Remove card
          </div>
        </div>
      </div>
    </>
  );
};

export default Payments;
 45  
src/components/Payments/_payments.scss
@@ -0,0 +1,45 @@
.payments-container {
  display: flex;
  flex-direction: column;
  justify-content: space-between;

  .payments-card {
    .card {
      min-width: 20rem !important;
      height: 17rem !important;
    }
  }
  .payments-buttons {
    display: flex;

    justify-content: space-around;
    &-add {
      padding: 1em 1.5em;
      border: 3px dashed $color-primary1;
      color: $color-primary1;
      border-radius: 1em;
      cursor: pointer;
      font-size: 1.5rem;
      &:hover {
        background: $color-primary1;
        color: $color-primary2;
      }
    }
    &-remove {
      padding: 1em 1em;
      border: 3px dashed $color-secondary1;
      border-radius: 1em;
      cursor: pointer;
      color: $color-secondary1;
      font-size: 1.5rem;
      &:hover {
        background: $color-secondary1;
        color: $color-primary2;
      }
    }
  }
  ._2D_VfCL6PDramYdGNPlSSA {
    min-width: 100% !important;
    background: linear-gradient(35deg, #fb6340 0, #fbb140 100%) !important;
  }
}
 26  
src/components/ProfileInfo/ProfileInfo.js
@@ -0,0 +1,26 @@
import React from "react";
import profile from "../../assets/profile.jpg";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faBars } from "@fortawesome/free-solid-svg-icons";
const ProfileInfo = () => {
  return (
    <>
      <div className="profile-container mt-lg-5 mb-sm-3 mx-lg-5">
        <div className="profile-img-wrapper">
          <div className="profile-img">
            <img src={profile} alt="profile" />
          </div>
          <div className="profile-name">
            <div className="profile-name-primary">Hashim Aslam </div>
            <div className="profile-name-secondary"> 23 years, India</div>
          </div>
        </div>
        <div className="profile-icon">
          <FontAwesomeIcon icon={faBars} size="1x" color="#5c72f2" />
        </div>
      </div>
    </>
  );
};

export default ProfileInfo;
 39  
src/components/ProfileInfo/_profileinfo.scss
@@ -0,0 +1,39 @@
.profile-container {
  display: flex;
  flex-direction: row;
  justify-content: space-between;

  .profile-img-wrapper {
    display: flex;
    flex-direction: row;
    justify-content: center;
    .profile-img {
      width: 40px;
      height: 40px;
      border-radius: 1em;
      margin-right: 1em;
      img {
        width: 40px;
        height: 40px;
        border-radius: 3em;
      }
    }
    .profile-name {
      &-primary {
        font-size: 1.5rem;
        color: $color-tertiary1;
        font-weight: 600;
      }
      &-secondary {
        font-size: 1rem;
        color: green;
      }
    }
  }

  .profile-icon {
    right: 0;
    align-self: center;
    cursor: pointer;
  }
}
 65  
src/components/SideNav/SideNav.js
@@ -0,0 +1,65 @@
import React from "react";
import { ReactComponent as Cross } from "../../assets/red-cross.svg";
import { ReactComponent as Home } from "../../assets/home.svg";
import { ReactComponent as Settings } from "../../assets/settings.svg";
import { ReactComponent as Question } from "../../assets/question.svg";
import { ReactComponent as Heart } from "../../assets/heart.svg";
import { ReactComponent as Mail } from "../../assets/mail.svg";
import { ReactComponent as Exit } from "../../assets/exit.svg";

const SideNav = () => {
  return (
    <>
      <div className="sidenav-main ">
        <div className="sidenav-brand mt-lg-3">
          <div className="sidenav-brand-icon">
            <Cross />
          </div>
          <div className="sidenav-brand-info">Medi</div>
        </div>
        <div className="sidenav-menu-wrapper">
          <div className="sidenav-ul">
            <div className="sidenav-li">
              <div className="sidenav-icon-wrapper">
                {" "}
                <Home />
              </div>
            </div>
            <div className="sidenav-li">
              <div className="sidenav-icon-wrapper">
                {" "}
                <Heart />
              </div>
            </div>
            <div className="sidenav-li">
              <div className="sidenav-icon-wrapper">
                {" "}
                <Mail />
              </div>
            </div>
            <div className="sidenav-li">
              <div className="sidenav-icon-wrapper">
                {" "}
                <Settings />
              </div>
            </div>
            <div className="sidenav-li">
              <div className="sidenav-icon-wrapper">
                {" "}
                <Question />
              </div>
            </div>
          </div>
          <div className="sidenav-exit">
            <div className="sidenav-icon-wrapper">
              {" "}
              <Exit />
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default SideNav;
 92  
src/components/SideNav/_sidenav.scss
@@ -0,0 +1,92 @@
.sidenav-main {
  padding: 0.5em;
  cursor: pointer;
  transition: all 0.3s ease-out;
  .sidenav-brand {
    &-icon {
      fill: $color-primary2;
      padding-left: 0.7em;
      padding-right: 0.7em;
      padding-top: 0.7em;
      padding-bottom: 0.2em;
      transition: all 0.3s ease-out;
    }
    &-info {
      font-size: 1.6rem;
      color: $color-primary2;
      font-weight: 800;
      text-align: center;
      transition: all 0.3s ease-out;
    }
    &:hover {
      transform: scale(1.2);
    }
  }

  //menu wraper
  .sidenav-menu-wrapper {
    margin-top: 5rem;

    .sidenav-ul {
      position: absolute;
      list-style-type: none;

      // margin: 0;
      top: 50%;
      display: flex;

      justify-content: start;
      flex-direction: column;

      transform: translateY(-50%);
      .sidenav-li {
        padding-left: 0.7em;
        padding-right: 0.7em;
        padding-top: 0.7em;
        padding-bottom: 0.7em;
        border-radius: 0.5em;
        margin-top: 1em;
        transition: all 0.3s ease-out;
        .sidenav-icon-wrapper {
          color: $color-primary2;
          fill: $color-primary2;

          cursor: pointer;
        }
        &:hover {
          background-color: $color-secondary2;
          transform: scale(1.2);
        }
        &:active {
          transform: scale(0.92);
        }
      }
    }

    .sidenav-exit {
      position: absolute;
      fill: $color-tertiary2;
      bottom: 0;
      padding-bottom: 3em;
      transition: all 0.3s ease-out;
      .sidenav-icon-wrapper {
        padding-left: 0.7em;
        padding-right: 0.7em;
        padding-top: 0.7em;
        padding-bottom: 0.7em;
        width: 20px;
        height: 20px;
      }
      &:hover {
        transform: scale(1.2);
      }
    }
  }
}

@media only screen and (max-width: 700px) {
  .sidenav-ul {
    display: flex;
    flex-direction: row;
  }
}
 39  
src/components/upcomingCards/UpcomingCards.js
@@ -0,0 +1,39 @@
import React from "react";
import { ReactComponent as Dent } from "../../assets/toothfill.svg";
import { ReactComponent as Cardio } from "../../assets/heartbeat.svg";
import { ReactComponent as Vitamin } from "../../assets/drug.svg";
import { ReactComponent as Drug } from "../../assets/pipette.svg";
const UpcomingCards = props => {
  return (
    <>
      <div
        className={
          props.type !== "dent"
            ? "upcard-container-grey mx-5 mt-3 mb-5"
            : "upcard-container mx-5 mt-5 mb-4"
        }
      >
        <div className="upcard-icon">
          {props.type === "dent" ? (
            <Dent />
          ) : props.type === "vitamin" ? (
            <Vitamin />
          ) : props.type === "drug" ? (
            <Drug />
          ) : (
            <Cardio />
          )}
        </div>
        <div className="upcard-info">
          <div className="upcard-info-primary">Dentist</div>
          <div className="upcard-info-secondary">8:00-9:00</div>
          <div className="upcard-info-secondary">
            Dr.Alex Bengimin <span className="upcard-info-tertiary"></span>(Cab
            39)
          </div>
        </div>
      </div>
    </>
  );
};
export default UpcomingCards;
 87  
src/components/upcomingCards/_upcomingcard.scss
@@ -0,0 +1,87 @@
.upcard-container {
  display: flex;
  flex-direction: row;
  padding: 1.5em;
  justify-content: start;
  align-items: flex-start;
  background-color: $color-primary1;
  border-radius: 1em;
  box-shadow: 5px 5px 18px 2px rgba(0, 0, 0, 0.47);
  transition: all 0.3s ease;
  cursor: pointer;
  .upcard-icon {
    color: $color-primary2;
    fill: $color-primary2;
    width: 30px;
    height: 30px;
    margin-right: 1em;
  }
  .upcard-info {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    &-primary {
      font-size: 1.5rem;
      color: $color-primary2;
    }
    &-secondary {
      font-size: 1rem;
      color: $color-primary2;
    }
  }
  .upcard-info-tertiary {
    font-size: 1rem;
    color: $color-tertiary2;
  }
  &:hover {
    transform: scale(1.1);
  }
  &:active {
    transform: scale(0.92);
  }
}

//grey color

.upcard-container-grey {
  display: flex;
  flex-direction: row;
  padding: 1.5em;
  justify-content: start;
  align-items: flex-start;
  background-color: $color-tertiary3;
  border-radius: 1em;
  transition: all 0.3s ease;
  cursor: pointer;

  .upcard-icon {
    color: $color-primary1;
    fill: $color-primary1;
    width: 30px;
    height: 30px;
    margin-right: 1em;
  }
  .upcard-info {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    &-primary {
      font-size: 1.5rem;
      color: $color-tertiary1;
    }
    &-secondary {
      font-size: 1rem;
      color: $color-tertiary1;
    }
  }
  .upcard-info-tertiary {
    font-size: 1rem;
    color: $color-tertiary1;
  }
  &:hover {
    transform: scale(1.1);
  }
  &:active {
    transform: scale(0.92);
  }
}
 12  
src/index.js
@@ -0,0 +1,12 @@
import React from "react";
import ReactDOM from "react-dom";
import "bootstrap/dist/css/bootstrap.min.css";
import App from "./components/App";
import "./Sass/main.scss";

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById("root")
);
 7  
src/logo.svg
Unable to render code block

 141  
src/serviceWorker.js
@@ -0,0 +1,141 @@
// This optional code is used to register a service worker.
// register() is not called by default.

// This lets the app load faster on subsequent visits in production, and gives
// it offline capabilities. However, it also means that developers (and users)
// will only see deployed updates on subsequent visits to a page, after all the
// existing tabs open on the page have been closed, since previously cached
// resources are updated in the background.

// To learn more about the benefits of this model and instructions on how to
// opt-in, read https://bit.ly/CRA-PWA

const isLocalhost = Boolean(
  window.location.hostname === 'localhost' ||
    // [::1] is the IPv6 localhost address.
    window.location.hostname === '[::1]' ||
    // 127.0.0.0/8 are considered localhost for IPv4.
    window.location.hostname.match(
      /^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/
    )
);

export function register(config) {
  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {
    // The URL constructor is available in all browsers that support SW.
    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);
    if (publicUrl.origin !== window.location.origin) {
      // Our service worker won't work if PUBLIC_URL is on a different origin
      // from what our page is served on. This might happen if a CDN is used to
      // serve assets; see https://github.com/facebook/create-react-app/issues/2374
      return;
    }

    window.addEventListener('load', () => {
      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;

      if (isLocalhost) {
        // This is running on localhost. Let's check if a service worker still exists or not.
        checkValidServiceWorker(swUrl, config);

        // Add some additional logging to localhost, pointing developers to the
        // service worker/PWA documentation.
        navigator.serviceWorker.ready.then(() => {
          console.log(
            'This web app is being served cache-first by a service ' +
              'worker. To learn more, visit https://bit.ly/CRA-PWA'
          );
        });
      } else {
        // Is not localhost. Just register service worker
        registerValidSW(swUrl, config);
      }
    });
  }
}

function registerValidSW(swUrl, config) {
  navigator.serviceWorker
    .register(swUrl)
    .then(registration => {
      registration.onupdatefound = () => {
        const installingWorker = registration.installing;
        if (installingWorker == null) {
          return;
        }
        installingWorker.onstatechange = () => {
          if (installingWorker.state === 'installed') {
            if (navigator.serviceWorker.controller) {
              // At this point, the updated precached content has been fetched,
              // but the previous service worker will still serve the older
              // content until all client tabs are closed.
              console.log(
                'New content is available and will be used when all ' +
                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'
              );

              // Execute callback
              if (config && config.onUpdate) {
                config.onUpdate(registration);
              }
            } else {
              // At this point, everything has been precached.
              // It's the perfect time to display a
              // "Content is cached for offline use." message.
              console.log('Content is cached for offline use.');

              // Execute callback
              if (config && config.onSuccess) {
                config.onSuccess(registration);
              }
            }
          }
        };
      };
    })
    .catch(error => {
      console.error('Error during service worker registration:', error);
    });
}

function checkValidServiceWorker(swUrl, config) {
  // Check if the service worker can be found. If it can't reload the page.
  fetch(swUrl, {
    headers: { 'Service-Worker': 'script' },
  })
    .then(response => {
      // Ensure service worker exists, and that we really are getting a JS file.
      const contentType = response.headers.get('content-type');
      if (
        response.status === 404 ||
        (contentType != null && contentType.indexOf('javascript') === -1)
      ) {
        // No service worker found. Probably a different app. Reload the page.
        navigator.serviceWorker.ready.then(registration => {
          registration.unregister().then(() => {
            window.location.reload();
          });
        });
      } else {
        // Service worker found. Proceed as normal.
        registerValidSW(swUrl, config);
      }
    })
    .catch(() => {
      console.log(
        'No internet connection found. App is running in offline mode.'
      );
    });
}

export function unregister() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready
      .then(registration => {
        registration.unregister();
      })
      .catch(error => {
        console.error(error.message);
      });
  }
}
 5  
src/setupTests.js
@@ -0,0 +1,5 @@
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom/extend-expect';
